#include "VectorFunctions/ASSET_VectorFunctions.h"

namespace ASSET {


  
  struct MEEDynamics : VectorFunction<MEEDynamics, 9, 6, Analytic, Analytic> {
    using Base = VectorFunction<MEEDynamics, 9, 6, Analytic, Analytic>;
    DENSE_FUNCTION_BASE_TYPES(Base);

    // This was generated by a computer, Im not a madman

    double mu = 1.0;
    double sqm = 1.0;
    static const bool IsVectorizable = true;

    MEEDynamics() {
      this->setIORows(9, 6);
    }
    MEEDynamics(double mu) : mu(mu),sqm(sqrt(mu)) {
      this->setIORows(9, 6);
    }

    template<class InType, class OutType>
    inline void compute_impl(ConstVectorBaseRef<InType> x_, ConstVectorBaseRef<OutType> fx_) const {

      typedef typename InType::Scalar Scalar;
      VectorBaseRef<OutType> _fx_ = fx_.const_cast_derived();

      Scalar x0 = x_[0];
      Scalar x1 = x_[1];
      Scalar x2 = x_[2];
      Scalar x3 = x_[3];
      Scalar x4 = x_[4];
      Scalar x5 = x_[5];
      Scalar x6 = x_[6];
      Scalar x7 = x_[7];
      Scalar x8 = x_[8];

      Scalar sqx0 = sqrt(x0);

      Scalar x9 = Scalar(1.0/sqm);
      Scalar x10 = cos(x5);
      Scalar x11 = sin(x5);
      Scalar x12 = x1 * x10 + x11 * x2;
      Scalar x13 = x12 + 1.0;
      Scalar x14 = 1.0 / x13;
      Scalar x15 = x14 * x7;
      Scalar x16 = x10 * x4;
      Scalar x17 = x11 * x3;
      Scalar x18 = x14 * x8;
      Scalar x19 = x12 + 2.0;
      Scalar x20 = sqx0 * x9;
      Scalar x21 = x18 * (-x16 + x17);
      Scalar x22 = 0.5 * x18 * x20 * ((x3*x3) + (x4*x4) + 1.0);

      _fx_[0] = 2.0 * (x0 * sqx0) * x15 * x9;
      _fx_[1] = x20 * (x11 * x6 + x15 * (x1 + x10 * x19) + x18 * x2 * (x16 - x17));
      _fx_[2] = x20 * (x1 * x21 - x10 * x6 + x15 * (x11 * x19 + x2));
      _fx_[3] = x10 * x22;
      _fx_[4] = x11 * x22;
      _fx_[5] = x20 * (mu * x13*x13 / (x0*x0) + 1.0 * x21);
    }

    template<class InType, class OutType, class JacType>
    inline void compute_jacobian_impl(ConstVectorBaseRef<InType> x_,
                                      ConstVectorBaseRef<OutType> fx_,
                                      ConstMatrixBaseRef<JacType> jx_) const {

      typedef typename InType::Scalar Scalar;
      VectorBaseRef<OutType> _fx_ = fx_.const_cast_derived();
      MatrixBaseRef<JacType> _jx_ = jx_.const_cast_derived();

      Scalar x0 = x_[0];
      Scalar x1 = x_[1];
      Scalar x2 = x_[2];
      Scalar x3 = x_[3];
      Scalar x4 = x_[4];
      Scalar x5 = x_[5];
      Scalar x6 = x_[6];
      Scalar x7 = x_[7];
      Scalar x8 = x_[8];

      Scalar sqx0 = sqrt(x0);


      Scalar x9 = cos(x5);
      Scalar x10 = x1 * x9;
      Scalar x11 = sin(x5);
      Scalar x12 = x11 * x2;
      Scalar x13 = x10 + x12;
      Scalar x14 = x13 + 1.0;
      Scalar x15 = 1.0 / x14;
      Scalar x16 = x15 * x7;
      Scalar x17 = Scalar(sqm);
      Scalar x18 = 1.0 / x17;
      Scalar x19 = 2.0 * (x0 * sqx0) * x18;
      Scalar x20 = x11 * x6;
      Scalar x21 = x4 * x9;
      Scalar x22 = x11 * x3;
      Scalar x23 = x21 - x22;
      Scalar x24 = x15 * x8;
      Scalar x25 = x23 * x24;
      Scalar x26 = x13 + 2.0;
      Scalar x27 = x26 * x9;
      Scalar x28 = x1 + x27;
      Scalar x29 = x16 * x28 + x2 * x25 + x20;
      Scalar x30 = sqx0;
      Scalar x31 = x18 * x30;
      Scalar x32 = x6 * x9;
      Scalar x33 = -x21 + x22;
      Scalar x34 = x24 * x33;
      Scalar x35 = x11 * x26;
      Scalar x36 = x2 + x35;
      Scalar x37 = x1 * x34 + x16 * x36 - x32;
      Scalar x38 = x31 * x9;
      Scalar x39 = (x3*x3) + (x4*x4) + 1.0;
      Scalar x40 = 0.5 * x39;
      Scalar x41 = x24 * x40;
      Scalar x42 = x38 * x41;
      Scalar x43 = x11 * x31;
      Scalar x44 = x41 * x43;
      Scalar x45 = (x14*x14);
      Scalar x46 = mu / (x0*x0);
      Scalar x47 = 1.0 * x34 + x45 * x46;
      Scalar x48 = 1.0 / x45;
      Scalar x49 = x48 * x7;
      Scalar x50 = x19 * x49;
      Scalar x51 = x1 * x11;
      Scalar x52 = x2 * x9;
      Scalar x53 = x51 - x52;
      Scalar x54 = x18 / x30;
      Scalar x55 = (1.0 / 2.0) * x54;
      Scalar x56 = (x9*x9);
      Scalar x57 = x48 * x8;
      Scalar x58 = x23 * x57;
      Scalar x59 = x28 * x49;
      Scalar x60 = x11 * x16 * x9;
      Scalar x61 = x24 * x31;
      Scalar x62 = x3 * x9;
      Scalar x63 = x11 * x4;
      Scalar x64 = -x51 + x52;
      Scalar x65 = x15 * x31;
      Scalar x66 = x33 * x57;
      Scalar x67 = x36 * x49;
      Scalar x68 = (x11*x11);
      Scalar x69 = x24 * (x62 + x63);
      Scalar x70 = x53 * x66;
      Scalar x71 = x33 * x65;
      Scalar x72 = 0.25 * x24 * x39 * x54;
      Scalar x73 = x40 * x57;
      Scalar x74 = x31 * x73;
      Scalar x75 = x43 * x73;
      Scalar x76 = -x75 * x9;
      Scalar x77 = 1.0 * x61;
      Scalar x78 = x15 * x40;
      Scalar x79 = x14 * x46;
      Scalar x80 = 2 * x79;
      Scalar x81 = 1.0 * x66;
      Scalar x82 = 1.0 * x24;

      _fx_[0] = x16 * x19;
      _fx_[1] = x29 * x31;
      _fx_[2] = x31 * x37;
      _fx_[3] = x42;
      _fx_[4] = x44;
      _fx_[5] = x31 * x47;

      _jx_(0, 0) = 3.0 * x16 * x31;
      _jx_(1, 0) = x29 * x55;
      _jx_(2, 0) = x37 * x55;
      _jx_(3, 0) = x72 * x9;
      _jx_(4, 0) = x11 * x72;
      _jx_(5, 0) = x47 * x55 - 2 * x17 * x45 / (x0*x0*sqx0);
      _jx_(0, 1) = -x50 * x9;
      _jx_(1, 1) = x31 * (x16 * (x56 + 1) - x52 * x58 - x59 * x9);
      _jx_(2, 1) = x31 * (-x10 * x66 + x34 + x60 - x67 * x9);
      _jx_(3, 1) = -x56 * x74;
      _jx_(4, 1) = x76;
      _jx_(5, 1) = x31 * (x80 * x9 - x81 * x9);
      _jx_(0, 2) = -x11 * x50;
      _jx_(1, 2) = x31 * (-x11 * x59 - x12 * x58 + x25 + x60);
      _jx_(2, 2) = x31 * (-x11 * x67 + x16 * (x68 + 1) - x51 * x66);
      _jx_(3, 2) = x76;
      _jx_(4, 2) = -x68 * x74;
      _jx_(5, 2) = x31 * (x11 * x80 - x11 * x81);
      _jx_(0, 3) = 0;
      _jx_(1, 3) = -x12 * x61;
      _jx_(2, 3) = x51 * x61;
      _jx_(3, 3) = x62 * x77;
      _jx_(4, 3) = x22 * x77;
      _jx_(5, 3) = x43 * x82;
      _jx_(0, 4) = 0;
      _jx_(1, 4) = x52 * x61;
      _jx_(2, 4) = -x10 * x61;
      _jx_(3, 4) = x21 * x77;
      _jx_(4, 4) = x63 * x77;
      _jx_(5, 4) = -x38 * x82;
      _jx_(0, 5) = x50 * x53;
      _jx_(1, 5) =
          x31 * (x16 * (-x35 + x64 * x9) + x2 * x24 * (-x62 - x63) + x2 * x53 * x58 + x32 + x53 * x59);
      _jx_(2, 5) = x31 * (x1 * x69 + x1 * x70 + x16 * (x11 * x64 + x27) + x20 + x53 * x67);
      _jx_(3, 5) = x38 * x53 * x73 - x44;
      _jx_(4, 5) = x42 + x53 * x75;
      _jx_(5, 5) = x31 * (1.0 * x69 + 1.0 * x70 + x79 * (-2 * x51 + 2 * x52));
      _jx_(0, 6) = 0;
      _jx_(1, 6) = x43;
      _jx_(2, 6) = -x38;
      _jx_(3, 6) = 0;
      _jx_(4, 6) = 0;
      _jx_(5, 6) = 0;
      _jx_(0, 7) = x15 * x19;
      _jx_(1, 7) = x28 * x65;
      _jx_(2, 7) = x36 * x65;
      _jx_(3, 7) = 0;
      _jx_(4, 7) = 0;
      _jx_(5, 7) = 0;
      _jx_(0, 8) = 0;
      _jx_(1, 8) = x2 * x23 * x65;
      _jx_(2, 8) = x1 * x71;
      _jx_(3, 8) = x38 * x78;
      _jx_(4, 8) = x43 * x78;
      _jx_(5, 8) = 1.0 * x71;
    }

    template<class InType,
             class OutType,
             class JacType,
             class AdjGradType,
             class AdjHessType,
             class AdjVarType>
    inline void compute_jacobian_adjointgradient_adjointhessian_impl(
        ConstVectorBaseRef<InType> x_,
        ConstVectorBaseRef<OutType> fx_,
        ConstMatrixBaseRef<JacType> jx_,
        ConstVectorBaseRef<AdjGradType> adjgrad_,
        ConstMatrixBaseRef<AdjHessType> adjhess_,
        ConstVectorBaseRef<AdjVarType> adjvars) const {
      typedef typename InType::Scalar Scalar;
      VectorBaseRef<OutType> _fx_ = fx_.const_cast_derived();
      MatrixBaseRef<JacType> _jx_ = jx_.const_cast_derived();
      VectorBaseRef<AdjGradType> _gx_ = adjgrad_.const_cast_derived();
      MatrixBaseRef<AdjHessType> _hx_ = adjhess_.const_cast_derived();

      Scalar x0 = x_[0];
      Scalar x1 = x_[1];
      Scalar x2 = x_[2];
      Scalar x3 = x_[3];
      Scalar x4 = x_[4];
      Scalar x5 = x_[5];
      Scalar x6 = x_[6];
      Scalar x7 = x_[7];
      Scalar x8 = x_[8];

      Scalar LM0 = adjvars[0];
      Scalar LM1 = adjvars[1];
      Scalar LM2 = adjvars[2];
      Scalar LM3 = adjvars[3];
      Scalar LM4 = adjvars[4];
      Scalar LM5 = adjvars[5];

      Scalar sqx0 = sqrt(x0);


      Scalar x9 = cos(x5);
      Scalar x10 = x1 * x9;
      Scalar x11 = sin(x5);
      Scalar x12 = x11 * x2;
      Scalar x13 = x10 + x12;
      Scalar x14 = x13 + 1.0;
      Scalar x15 = 1.0 / x14;
      Scalar x16 = x15 * x7;
      Scalar x17 = Scalar(sqm);
      Scalar x18 = 1.0 / x17;
      Scalar x19 = (x0 * sqx0);
      Scalar x20 = 2.0 * x19;
      Scalar x21 = x18 * x20;
      Scalar x22 = x11 * x6;
      Scalar x23 = x4 * x9;
      Scalar x24 = x11 * x3;
      Scalar x25 = x23 - x24;
      Scalar x26 = x15 * x25;
      Scalar x27 = x26 * x8;
      Scalar x28 = x13 + 2.0;
      Scalar x29 = x28 * x9;
      Scalar x30 = x1 + x29;
      Scalar x31 = x16 * x30 + x2 * x27 + x22;
      Scalar x32 = sqx0;
      Scalar x33 = x18 * x32;
      Scalar x34 = x6 * x9;
      Scalar x35 = -x23 + x24;
      Scalar x36 = x15 * x35;
      Scalar x37 = x36 * x8;
      Scalar x38 = x11 * x28;
      Scalar x39 = x2 + x38;
      Scalar x40 = x1 * x37 + x16 * x39 - x34;
      Scalar x41 = x33 * x9;
      Scalar x42 = x15 * x8;
      Scalar x43 = (x3*x3) + (x4*x4) + 1.0;
      Scalar x44 = 0.5 * x43;
      Scalar x45 = x42 * x44;
      Scalar x46 = x41 * x45;
      Scalar x47 = x11 * x33;
      Scalar x48 = x45 * x47;
      Scalar x49 = (x14*x14);
      Scalar x50 = mu / (x0*x0);
      Scalar x51 = 1.0 * x37 + x49 * x50;
      Scalar x52 = 3.0 * x33;
      Scalar x53 = x16 * x52;
      Scalar x54 = 1.0 / x49;
      Scalar x55 = x54 * x9;
      Scalar x56 = x55 * x7;
      Scalar x57 = x21 * x56;
      Scalar x58 = x11 * x54;
      Scalar x59 = x58 * x7;
      Scalar x60 = x21 * x59;
      Scalar x61 = x1 * x11;
      Scalar x62 = x2 * x9;
      Scalar x63 = x61 - x62;
      Scalar x64 = x54 * x63;
      Scalar x65 = x64 * x7;
      Scalar x66 = x21 * x65;
      Scalar x67 = x15 * x18;
      Scalar x68 = x20 * x67;
      Scalar x69 = x18 * x31;
      Scalar x70 = 1.0 / x32;
      Scalar x71 = (1.0 / 2.0) * x70;
      Scalar x72 = x69 * x71;
      Scalar x73 = (x9*x9);
      Scalar x74 = x73 + 1;
      Scalar x75 = x15 * x74;
      Scalar x76 = x30 * x55;
      Scalar x77 = x25 * x8;
      Scalar x78 = x62 * x77;
      Scalar x79 = -x54 * x78 - x7 * x76;
      Scalar x80 = x7 * x75 + x79;
      Scalar x81 = x33 * x80;
      Scalar x82 = x11 * x9;
      Scalar x83 = x16 * x82;
      Scalar x84 = x12 * x54;
      Scalar x85 = x77 * x84;
      Scalar x86 = x30 * x58;
      Scalar x87 = x7 * x86;
      Scalar x88 = x27 + x83 - x85 - x87;
      Scalar x89 = x33 * x88;
      Scalar x90 = x12 * x42;
      Scalar x91 = x42 * x62;
      Scalar x92 = x3 * x9;
      Scalar x93 = x11 * x4;
      Scalar x94 = -x92 - x93;
      Scalar x95 = x42 * x94;
      Scalar x96 = x64 * x77;
      Scalar x97 = x30 * x64;
      Scalar x98 = -x61 + x62;
      Scalar x99 = x9 * x98;
      Scalar x100 = -x38;
      Scalar x101 = x100 + x99;
      Scalar x102 = x101 * x15;
      Scalar x103 = x102 * x7 + x2 * x95 + x2 * x96 + x34 + x7 * x97;
      Scalar x104 = x103 * x33;
      Scalar x105 = x15 * x33;
      Scalar x106 = x105 * x30;
      Scalar x107 = x2 * x26;
      Scalar x108 = x18 * x71;
      Scalar x109 = x108 * x40;
      Scalar x110 = x39 * x55;
      Scalar x111 = x35 * x8;
      Scalar x112 = x10 * x54;
      Scalar x113 = -x110 * x7 - x111 * x112;
      Scalar x114 = x113 + x37 + x83;
      Scalar x115 = x114 * x33;
      Scalar x116 = (x11*x11);
      Scalar x117 = x116 + 1;
      Scalar x118 = x117 * x15;
      Scalar x119 = x111 * x61;
      Scalar x120 = x119 * x54;
      Scalar x121 = x39 * x58;
      Scalar x122 = x121 * x7;
      Scalar x123 = x118 * x7 - x120 - x122;
      Scalar x124 = x123 * x33;
      Scalar x125 = x42 * x61;
      Scalar x126 = x10 * x42;
      Scalar x127 = x92 + x93;
      Scalar x128 = x127 * x42;
      Scalar x129 = x111 * x64;
      Scalar x130 = x39 * x64;
      Scalar x131 = x11 * x98;
      Scalar x132 = x131 + x29;
      Scalar x133 = x132 * x15;
      Scalar x134 = x1 * x128 + x1 * x129 + x130 * x7 + x133 * x7 + x22;
      Scalar x135 = x134 * x33;
      Scalar x136 = x105 * x39;
      Scalar x137 = x33 * x36;
      Scalar x138 = x42 * x9;
      Scalar x139 = x18 * x70;
      Scalar x140 = 0.25 * x43;
      Scalar x141 = x139 * x140;
      Scalar x142 = x138 * x141;
      Scalar x143 = x54 * x8;
      Scalar x144 = x143 * x73;
      Scalar x145 = x33 * x44;
      Scalar x146 = x144 * x145;
      Scalar x147 = -x146;
      Scalar x148 = x55 * x8;
      Scalar x149 = x148 * x47;
      Scalar x150 = x149 * x44;
      Scalar x151 = -x150;
      Scalar x152 = 1.0 * x42;
      Scalar x153 = x152 * x33;
      Scalar x154 = x153 * x92;
      Scalar x155 = x153 * x23;
      Scalar x156 = -x48;
      Scalar x157 = x64 * x8;
      Scalar x158 = x41 * x44;
      Scalar x159 = x156 + x157 * x158;
      Scalar x160 = x15 * x41;
      Scalar x161 = x160 * x44;
      Scalar x162 = x11 * x42;
      Scalar x163 = x141 * x162;
      Scalar x164 = x116 * x143;
      Scalar x165 = x145 * x164;
      Scalar x166 = x153 * x24;
      Scalar x167 = x153 * x93;
      Scalar x168 = x11 * x63;
      Scalar x169 = x143 * x168;
      Scalar x170 = x145 * x169 + x46;
      Scalar x171 = x15 * x47;
      Scalar x172 = x171 * x44;
      Scalar x173 = x17 * x49;
      Scalar x174 = 1.0/(x0*x0*sqx0);
      Scalar x175 = 2 * x174;
      Scalar x176 = x108 * x51 - x173 * x175;
      Scalar x177 = 2 * x50;
      Scalar x178 = x14 * x177;
      Scalar x179 = x111 * x55;
      Scalar x180 = x178 * x9 - 1.0 * x179;
      Scalar x181 = x180 * x33;
      Scalar x182 = x11 * x178;
      Scalar x183 = x111 * x58;
      Scalar x184 = 1.0 * x183;
      Scalar x185 = x182 - x184;
      Scalar x186 = x185 * x33;
      Scalar x187 = x152 * x47;
      Scalar x188 = x152 * x41;
      Scalar x189 = 2 * x61;
      Scalar x190 = 2 * x62;
      Scalar x191 = -x189 + x190;
      Scalar x192 = x191 * x50;
      Scalar x193 = 1.0 * x128 + 1.0 * x129 + x14 * x192;
      Scalar x194 = x193 * x33;
      Scalar x195 = -LM0 * x57;
      Scalar x196 = -LM3 * x146 + x195;
      Scalar x197 = LM0 * x60;
      Scalar x198 = LM4 * x165;
      Scalar x199 = LM2 * x33;
      Scalar x200 = LM1 * x33;
      Scalar x201 = LM5 * x187 + x125 * x199 - x200 * x90;
      Scalar x202 = LM5 * x188;
      Scalar x203 = x200 * x91;
      Scalar x204 = x126 * x199;
      Scalar x205 = LM1 * x47;
      Scalar x206 = LM2 * x41;
      Scalar x207 = LM5 * x33;
      Scalar x208 = x199 * x36;
      Scalar x209 = LM3 * x43;
      Scalar x210 = 1.0 / x19;
      Scalar x211 = 0.125 * x18 * x210;
      Scalar x212 = LM4 * x43;
      Scalar x213 = (1.0 / 4.0) * x210;
      Scalar x214 = x18 * x213;
      Scalar x215 = x14 * x17;
      Scalar x216 = 4 * x174 * x215;
      Scalar x217 = x216 * x9;
      Scalar x218 = x108 * x180;
      Scalar x219 = LM1 * x108;
      Scalar x220 = LM2 * x108;
      Scalar x221 = x41 * x54;
      Scalar x222 = 3.0 * LM0;
      Scalar x223 = x222 * x7;
      Scalar x224 = LM3 * x141;
      Scalar x225 = LM4 * x11;
      Scalar x226 = x141 * x148;
      Scalar x227 = x114 * x220 - x144 * x224 + x219 * x80 - x221 * x223 - x225 * x226;
      Scalar x228 = x11 * x216;
      Scalar x229 = x108 * x185;
      Scalar x230 = x47 * x54;
      Scalar x231 = LM4 * x141;
      Scalar x232 = x148 * x224;
      Scalar x233 = -x11 * x232 + x123 * x220 - x164 * x231 + x219 * x88 - x223 * x230;
      Scalar x234 = 0.5 * x139;
      Scalar x235 = LM5 * x234;
      Scalar x236 = LM3 * x92;
      Scalar x237 = x234 * x42;
      Scalar x238 = LM4 * x237;
      Scalar x239 = x125 * x220 + x162 * x235 - x219 * x90 + x236 * x237 + x238 * x24;
      Scalar x240 = LM3 * x23;
      Scalar x241 = -x126 * x220 - x138 * x235 + x219 * x91 + x237 * x240 + x238 * x93;
      Scalar x242 = x175 * x191 * x215;
      Scalar x243 = x108 * x193;
      Scalar x244 = LM0 * x52 * x65 + x103 * x219 + x134 * x220;
      Scalar x245 = x11 * x219 - x220 * x9;
      Scalar x246 = x67 * x71;
      Scalar x247 = LM1 * x246 * x30 + LM2 * x246 * x39 + x105 * x222;
      Scalar x248 = x140 * x67 * x70;
      Scalar x249 = LM3 * x248 * x9 + x1 * x220 * x36 + x107 * x219 + x225 * x248 + x235 * x36;
      Scalar x250 = 1/(x14*x14*x14);
      Scalar x251 = x250 * x73;
      Scalar x252 = 4.0 * LM0 * x18 * x19 * x7;
      Scalar x253 = 1.0 * x209;
      Scalar x254 = x33 * x8;
      Scalar x255 = x250 * x254;
      Scalar x256 = 1.0 * x212;
      Scalar x257 = x251 * x8;
      Scalar x258 = x257 * x47;
      Scalar x259 = 2.0 * x111;
      Scalar x260 = 2 * x251;
      Scalar x261 = x2 * x77;
      Scalar x262 = x30 * x7;
      Scalar x263 = x59 * x73;
      Scalar x264 = x1 * x73;
      Scalar x265 = x111 * x250;
      Scalar x266 = x39 * x7;
      Scalar x267 = x250 * x252;
      Scalar x268 = LM4 * x116;
      Scalar x269 = x268 * x8;
      Scalar x270 = 1.0 * x43;
      Scalar x271 = x250 * x41;
      Scalar x272 = x270 * x271;
      Scalar x273 = x250 * x259;
      Scalar x274 = 2 * x12;
      Scalar x275 = x250 * x77;
      Scalar x276 = x274 * x275;
      Scalar x277 = x250 * x262;
      Scalar x278 = 2 * x82;
      Scalar x279 = x116 * x56;
      Scalar x280 = 2 * x10;
      Scalar x281 = x265 * x280;
      Scalar x282 = x250 * x266;
      Scalar x283 = x199 * (x11 * x281 - x117 * x56 - x183 + x278 * x282 - x279)
                    + x200 * (-x263 + x276 * x9 + x277 * x278 - x55 * x77 - x59 * x74)
                    + x207 * (x177 * x82 + x273 * x82) + x253 * x258 + x267 * x82 + x269 * x272;
      Scalar x284 = x58 * x8;
      Scalar x285 = LM3 * x73;
      Scalar x286 = 1.0 * x143;
      Scalar x287 = x286 * x33;
      Scalar x288 = x285 * x287;
      Scalar x289 = 1.0 * LM5;
      Scalar x290 = x149 * x289;
      Scalar x291 = LM1 * x41;
      Scalar x292 = x12 * x143 * x291;
      Scalar x293 = LM4 * x286;
      Scalar x294 = x24 * x41;
      Scalar x295 = -x288 * x3 - x290 + x292 - x293 * x294;
      Scalar x296 = x143 * x264;
      Scalar x297 = x207 * x286;
      Scalar x298 = -x144 * x2 * x200 - x23 * x293 * x47 - x288 * x4 + x297 * x73;
      Scalar x299 = x189 - x190;
      Scalar x300 = x299 * x9;
      Scalar x301 = LM0 * x21;
      Scalar x302 = x301 * x7;
      Scalar x303 = x250 * x302;
      Scalar x304 = x44 * x47;
      Scalar x305 = x250 * x300 * x304 * x8;
      Scalar x306 = 2 * x99;
      Scalar x307 = 1.0 * x265;
      Scalar x308 = 1.0 * x127;
      Scalar x309 = -x148 * x308 - x182 + x184;
      Scalar x310 = x250 * x299;
      Scalar x311 = 2 * x83;
      Scalar x312 = x143 * x94;
      Scalar x313 = -x101 * x56 - x311 - x312 * x62 + x65 * x74 + x85 + x87;
      Scalar x314 = x265 * x299;
      Scalar x315 = x127 * x143;
      Scalar x316 = -x10 * x315 + x120 + x122 + x128 + x129 - x132 * x56;
      Scalar x317 = x168 * x56;
      Scalar x318 = -x116 * x16 + x16 * x73 + x317;
      Scalar x319 = -x301 * x55;
      Scalar x320 = x15 * x82;
      Scalar x321 = x112 * x35;
      Scalar x322 = x145 * x54;
      Scalar x323 = x289 * x35;
      Scalar x324 = x304 * x55;
      Scalar x325 = -LM4 * x324 - x200 * x25 * x54 * x62 - x221 * x323 - x285 * x322;
      Scalar x326 = 2 * x116;
      Scalar x327 = x1 * x265;
      Scalar x328 = 2 * x77;
      Scalar x329 = x116 * x2;
      Scalar x330 = x143 * x329;
      Scalar x331 = x268 * x287;
      Scalar x332 = -LM3 * x286 * x294 - x1 * x164 * x199 - x116 * x297 - x3 * x331;
      Scalar x333 = LM2 * x47;
      Scalar x334 = x10 * x143 * x333;
      Scalar x335 = -x240 * x286 * x47 + x290 - x331 * x4 + x334;
      Scalar x336 = x11 * x299;
      Scalar x337 = -x101 * x59 - x12 * x312 + x79 + x95 + x96;
      Scalar x338 = x113 + x117 * x65 - x132 * x59 + x311 - x315 * x61;
      Scalar x339 = x180 - x284 * x308;
      Scalar x340 = x145 * x310;
      Scalar x341 = -x301 * x58;
      Scalar x342 = x25 * x84;
      Scalar x343 = -LM3 * x324 - x199 * x35 * x54 * x61 - x230 * x323 - x268 * x322;
      Scalar x344 = LM3 * x188 + LM4 * x187;
      Scalar x345 = x168 * x286;
      Scalar x346 = x157 * x61;
      Scalar x347 = x12 * x157;
      Scalar x348 = 1.0 * x157 * x33;
      Scalar x349 = x24 * x348;
      Scalar x350 = LM2 * x105;
      Scalar x351 = LM1 * x105;
      Scalar x352 = 1.0 * x105;
      Scalar x353 = LM4 * x352;
      Scalar x354 = -x12 * x351 + x171 * x289 + x236 * x352 + x24 * x353 + x350 * x61;
      Scalar x355 = x157 * x41;
      Scalar x356 = x157 * x62;
      Scalar x357 = x10 * x157;
      Scalar x358 = x348 * x93;
      Scalar x359 = -x10 * x350 - x160 * x289 + x240 * x352 + x351 * x62 + x353 * x93;
      Scalar x360 = x63 * x9;
      Scalar x361 = x149 * x270;
      Scalar x362 = 1.0 * x63;
      Scalar x363 = x362 * x43;
      Scalar x364 = x168 * x8;
      Scalar x365 = x147 + x165 - x272 * x364;
      Scalar x366 = 2 * x277;
      Scalar x367 = 2 * x282;
      Scalar x368 = x16 * (-x116 + x73) + x317;
      Scalar x369 = x13 * x54;
      Scalar x370 = x299 * x63;
      Scalar x371 = x250 * x370;
      Scalar x372 = x13 * x143;
      Scalar x373 = x127 * x157;
      Scalar x374 = x111 * x369;
      Scalar x375 = 2 * x65;
      Scalar x376 = -x10 - x12;
      Scalar x377 = x2 * x94;
      Scalar x378 = x291 + x333;
      Scalar x379 = x301 * x64;
      Scalar x380 = x127 * x15;
      Scalar x381 = x1 * x380;
      Scalar x382 = x35 * x64;
      Scalar x383 = x1 * x382;
      Scalar x384 = 1.0 * x380;
      Scalar x385 = 1.0 * x382;
      Scalar x386 = x15 * x377;
      Scalar x387 = x2 * x25 * x64;
      Scalar x388 = x158 * x64;
      Scalar x389 = x168 * x322;
      Scalar x390 = x15 * x9;
      Scalar x391 = x30 * x54;
      Scalar x392 = x39 * x54;

      _fx_[0] = x16 * x21;
      _fx_[1] = x31 * x33;
      _fx_[2] = x33 * x40;
      _fx_[3] = x46;
      _fx_[4] = x48;
      _fx_[5] = x33 * x51;

      _jx_(0, 0) = x53;
      _jx_(1, 0) = x72;
      _jx_(2, 0) = x109;
      _jx_(3, 0) = x142;
      _jx_(4, 0) = x163;
      _jx_(5, 0) = x176;
      _jx_(0, 1) = -x57;
      _jx_(1, 1) = x81;
      _jx_(2, 1) = x115;
      _jx_(3, 1) = x147;
      _jx_(4, 1) = x151;
      _jx_(5, 1) = x181;
      _jx_(0, 2) = -x60;
      _jx_(1, 2) = x89;
      _jx_(2, 2) = x124;
      _jx_(3, 2) = x151;
      _jx_(4, 2) = -x165;
      _jx_(5, 2) = x186;
      _jx_(0, 3) = 0;
      _jx_(1, 3) = -x33 * x90;
      _jx_(2, 3) = x125 * x33;
      _jx_(3, 3) = x154;
      _jx_(4, 3) = x166;
      _jx_(5, 3) = x187;
      _jx_(0, 4) = 0;
      _jx_(1, 4) = x33 * x91;
      _jx_(2, 4) = -x126 * x33;
      _jx_(3, 4) = x155;
      _jx_(4, 4) = x167;
      _jx_(5, 4) = -x188;
      _jx_(0, 5) = x66;
      _jx_(1, 5) = x104;
      _jx_(2, 5) = x135;
      _jx_(3, 5) = x159;
      _jx_(4, 5) = x170;
      _jx_(5, 5) = x194;
      _jx_(0, 6) = 0;
      _jx_(1, 6) = x47;
      _jx_(2, 6) = -x41;
      _jx_(3, 6) = 0;
      _jx_(4, 6) = 0;
      _jx_(5, 6) = 0;
      _jx_(0, 7) = x68;
      _jx_(1, 7) = x106;
      _jx_(2, 7) = x136;
      _jx_(3, 7) = 0;
      _jx_(4, 7) = 0;
      _jx_(5, 7) = 0;
      _jx_(0, 8) = 0;
      _jx_(1, 8) = x107 * x33;
      _jx_(2, 8) = x1 * x137;
      _jx_(3, 8) = x161;
      _jx_(4, 8) = x172;
      _jx_(5, 8) = 1.0 * x137;

          _gx_[0] = LM0*x53 + LM1*x72 + LM2*x109 + LM3*x142 + LM4*x163 + LM5*x176;
          _gx_[1] = LM1*x81 + LM2*x115 - LM4*x150 + LM5*x181 + x196;
          _gx_[2] = LM1*x89 + LM2*x124 - LM3*x150 + LM5*x186 - x197 - x198;
          _gx_[3] = LM3*x154 + LM4*x166 + x201;
          _gx_[4] = LM3*x155 + LM4*x167 - x202 + x203 - x204;
          _gx_[5] = LM0*x66 + LM1*x104 + LM2*x135 + LM3*x159 + LM4*x170 + LM5*x194;
          _gx_[6] = x205 - x206;
          _gx_[7] = LM0*x68 + LM1*x106 + LM2*x136;
          _gx_[8] = LM3*x161 + LM4*x172 + x1*x208 + x107*x200 + 1.0*x207*x36;

          _hx_(0, 0) = 1.5 * LM0 * x139 * x16 - LM1 * x213 * x69 - LM2 * x214 * x40
                       + LM5 * (-x214 * x51 + 4 * x173 / (x0*x0*x0*sqx0)) - x138 * x209 * x211
                       - x162 * x211 * x212;
          _hx_(1, 0) = -LM5 * x217 + LM5 * x218 + x227;
          _hx_(2, 0) = -LM5 * x228 + LM5 * x229 + x233;
          _hx_(3, 0) = x239;
          _hx_(4, 0) = x241;
          _hx_(5, 0) =
              LM3 * (-x163 + x226 * x63) + LM4 * (x141 * x169 + x142) - LM5 * x242 + LM5 * x243 + x244;
          _hx_(6, 0) = x245;
          _hx_(7, 0) = x247;
          _hx_(8, 0) = x249;
          _hx_(0, 1) = LM5 * (-x217 + x218) + x227;
          _hx_(1, 1) = x199 * (-2 * x179 + x260 * x266 - 2 * x263 + 2 * x264 * x265)
                       + x200 * (x260 * x261 + x260 * x262 - 2 * x56 * x74)
                       + x207 * (x177 * x73 + x251 * x259) + x251 * x252 + x253 * x255 * pow(x9, 3)
                       + x256 * x258;
          _hx_(2, 1) = x283;
          _hx_(3, 1) = x295 + x333 * x42 - x334;
          _hx_(4, 1) = x199 * x296 - x206 * x42 + x298;
          _hx_(5, 1) = LM3 * (-x251 * x254 * x363 + x361) + LM4 * x365 + x197
                       + x199 * (-x281 * x63 + x316 - x360 * x367 + x368)
                       + x200 * (-x190 * x275 * x63 + x313 - x360 * x366)
                       + x207 * (x192 * x9 - x273 * x360 + x309) - x267 * x360;
          _hx_(6, 1) = 0;
          _hx_(7, 1) = x200 * x75 - x206 * x392 - x291 * x391 + x319 + x333 * x390;
          _hx_(8, 1) = -x199 * x321 + x208 + x325;
          _hx_(0, 2) = LM5 * (-x228 + x229) + x233;
          _hx_(1, 2) = x283;
          _hx_(2, 2) = (x11*x11*x11) * x255 * x256 + x116 * x253 * x271 * x8 + x116 * x267
                       + x199 * (-2 * x117 * x59 + x282 * x326 + x326 * x327)
                       + x200 * (x250 * x328 * x329 + x277 * x326 - 2 * x279 - x328 * x58)
                       + x207 * (x116 * x177 + x116 * x273);
          _hx_(3, 2) = x200 * x330 - x205 * x42 + x332;
          _hx_(4, 2) = x291 * x42 - x292 + x335;
          _hx_(5, 2) = LM3 * x365 + LM4 * (-x116 * x255 * x363 - x361) - x168 * x267 + x195
                       + x199 * (-x168 * x367 - x189 * x265 * x63 + x338)
                       + x200 * (-x168 * x366 - x276 * x63 + x337 + x368)
                       + x207 * (x11 * x192 - x168 * x273 + x339);
          _hx_(6, 2) = 0;
          _hx_(7, 2) = x118 * x199 + x205 * x390 - x205 * x391 - x333 * x392 + x341;
          _hx_(8, 2) = x200 * x26 - x200 * x342 + x343;
          _hx_(0, 3) = x239;
          _hx_(1, 3) = x199 * (-x10 * x284 + x162) + x295;
          _hx_(2, 3) = x200 * (-x162 + x330) + x332;
          _hx_(3, 3) = x344;
          _hx_(4, 3) = 0;
          _hx_(5, 3) = LM3 * (-x166 + x348 * x92) + LM4 * (x154 + x349) + x199 * (x126 + x346)
                       + x200 * (-x347 - x91) + x207 * (1.0 * x138 + x345);
          _hx_(6, 3) = 0;
          _hx_(7, 3) = 0;
          _hx_(8, 3) = x354;
          _hx_(0, 4) = x241;
          _hx_(1, 4) = x199 * (-x138 + x296) + x298;
          _hx_(2, 4) = x200 * (-x12 * x148 + x138) + x335;
          _hx_(3, 4) = 0;
          _hx_(4, 4) = x344;
          _hx_(5, 4) = LM3 * (-x167 + x23 * x348) + LM4 * (x155 + x358) + x199 * (x125 - x357)
                       + x200 * (x356 - x90) + x207 * (-x148 * x362 + 1.0 * x162);
          _hx_(6, 4) = 0;
          _hx_(7, 4) = 0;
          _hx_(8, 4) = x359;
          _hx_(0, 5) = -LM3 * x163 + LM4 * x142 + LM5 * (-x242 + x243) + x169 * x231 + x232 * x63 + x244;
          _hx_(1, 5) = -LM3 * x145 * x257 * x299 - LM4 * x146 - LM4 * x305 + x149 * x253 + x197 + x198
                       + x199 * (-x10 * x314 - x282 * x300 + x316 + x318)
                       + x200 * (-x277 * x300 - x310 * x78 + x313) + x207 * (-x300 * x307 + x306 * x50 + x309)
                       - x300 * x303;
          _hx_(2, 5) = LM3 * x165 - LM3 * x305 - x149 * x256 + x196
                       + x199 * (-x119 * x310 - x282 * x336 + x338)
                       + x200 * (-x12 * x310 * x77 - x277 * x336 + x318 + x337)
                       + x207 * (x131 * x177 - x307 * x336 + x339) - x269 * x340 - x303 * x336;
          _hx_(3, 5) = -LM3 * x166 + LM4 * x154 + LM4 * x349 + x199 * x346 - x200 * x347 + x202 - x203 + x204
                       + x207 * x345 + x236 * x348;
          _hx_(4, 5) = -LM3 * x167 + LM4 * x155 + LM4 * x358 - x199 * x357 + x200 * x356 + x201 + x240 * x348
                       - x289 * x355;
          _hx_(5, 5) =
              LM3 * (x158 * x371 * x8 + x158 * x372 - x33 * x345 * x43 - x46)
              + LM4 * (x156 + x270 * x355 + x304 * x372 + x340 * x364)
              + x199
                    * (x1 * x27 + 2 * x1 * x373 + x1 * x374 + x132 * x375 + x16 * (x100 + x11 * x376 + x306)
                       + x266 * x369 + x282 * x370 + x327 * x370 + x34)
              + x200
                    * (x101 * x375 + 2 * x157 * x377 + x16 * (-x131 + x168 + x376 * x9 + x9 * (x376 - 2.0))
                       + x2 * x37 - x22 + x261 * x369 + x261 * x371 + x262 * x369 + x277 * x370)
              + x207
                    * (x14 * x50 * (-x274 - x280) + x192 * x98 + 1.0 * x27 + x314 * x362 + 2.0 * x373
                       + 1.0 * x374)
              + x302 * x369 + x302 * x371;
          _hx_(6, 5) = x378;
          _hx_(7, 5) = x102 * x200 + x130 * x199 + x133 * x199 + x200 * x97 + x379;
          _hx_(8, 5) = -LM3 * x172 + LM3 * x388 + LM4 * x161 + LM4 * x389 + x199 * x381 + x199 * x383
                       + x200 * x386 + x200 * x387 + x207 * x384 + x207 * x385;
          _hx_(0, 6) = x245;
          _hx_(1, 6) = 0;
          _hx_(2, 6) = 0;
          _hx_(3, 6) = 0;
          _hx_(4, 6) = 0;
          _hx_(5, 6) = x378;
          _hx_(6, 6) = 0;
          _hx_(7, 6) = 0;
          _hx_(8, 6) = 0;
          _hx_(0, 7) = x247;
          _hx_(1, 7) = x199 * (-x110 + x320) + x200 * (x75 - x76) + x319;
          _hx_(2, 7) = x199 * (x118 - x121) + x200 * (x320 - x86) + x341;
          _hx_(3, 7) = 0;
          _hx_(4, 7) = 0;
          _hx_(5, 7) = x199 * (x130 + x133) + x200 * (x102 + x97) + x379;
          _hx_(6, 7) = 0;
          _hx_(7, 7) = 0;
          _hx_(8, 7) = 0;
          _hx_(0, 8) = x249;
          _hx_(1, 8) = x199 * (-x321 + x36) + x325;
          _hx_(2, 8) = x200 * (x26 - x342) + x343;
          _hx_(3, 8) = x354;
          _hx_(4, 8) = x359;
          _hx_(5, 8) = LM3 * (-x172 + x388) + LM4 * (x161 + x389) + x199 * (x381 + x383)
                       + x200 * (x386 + x387) + x207 * (x384 + x385);
          _hx_(6, 8) = 0;
          _hx_(7, 8) = 0;
          _hx_(8, 8) = 0;
    }
  };

}  // namespace ASSET